{"version":3,"sources":["api/items.js","components/Pagination/Pagination.jsx","App.js","index.js"],"names":["Pagination","state","maxCountPage","props","maxCount","createShowPages","pagesNumber","selPage","selectedPage","pagesForShow","push","i","length","changePageHandler","newSelectedPage","onChangeSelected","event","value","target","this","onChangeMaxCount","setState","total","Math","ceil","canLeft","canRight","showPages","aria-label","className","classNames","disabled","type","onClick","map","item","index","arr","key","name","onChange","maxCountHandler","React","Component","items","title","id","App","itemsFromServer","itemsForShow","slice","setSelected","pageNumber","end","start","setMaxCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be98fc45.chunk.js","sourcesContent":["const items = [];\n\nfor (let i = 1; i <= 82; i += 1) {\n  items.push({\n    title: `Item : ${i}`,\n    id: i,\n  });\n}\n\nexport default items;\n","import React from 'react';\nimport './Pagination.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass Pagination extends React.Component {\n  state = {\n    maxCountPage: this.props.maxCount,\n  };\n\n  createShowPages = (pagesNumber) => {\n    const { selectedPage: selPage } = this.props;\n    const pagesForShow = [];\n\n    if (pagesNumber === 1) {\n      return [1];\n    }\n\n    pagesForShow.push(1);\n    for (let i = 2; i < pagesNumber; i += 1) {\n      if (i === selPage || i - 1 === selPage || i + 1 === selPage) {\n        pagesForShow.push(i);\n      } else if (pagesForShow[pagesForShow.length - 1] !== null) {\n        pagesForShow.push(null);\n      }\n    }\n\n    pagesForShow.push(pagesNumber);\n\n    return pagesForShow;\n  };\n\n  changePageHandler = (newSelectedPage) => {\n    const { onChangeSelected, selectedPage } = this.props;\n\n    if (selectedPage !== newSelectedPage) {\n      onChangeSelected(newSelectedPage);\n    }\n  };\n\n  maxCountHandler(event) {\n    const { value } = event.target;\n    const { maxCount, onChangeMaxCount } = this.props;\n\n    if (maxCount !== value) {\n      onChangeMaxCount(+value);\n      this.setState({ maxCountPage: value });\n    }\n  }\n\n  render() {\n    const { selectedPage, total, maxCount } = this.props;\n    const { maxCountPage } = this.state;\n    const pagesNumber = Math.ceil(total / maxCount);\n    const canLeft = selectedPage !== 1;\n    const canRight = selectedPage !== pagesNumber;\n    const showPages = this.createShowPages(pagesNumber);\n\n    return (\n      <>\n        <nav aria-label=\"Page navigation example\">\n          <ul className=\"pagination\">\n            <li\n              className={classNames(\n                'page-item', { disabled: !canLeft },\n              )}\n            >\n              <button\n                className=\"page-link\"\n                type=\"button\"\n                onClick={() => this.changePageHandler(selectedPage - 1)}\n              >\n                Previous\n              </button>\n            </li>\n\n            {showPages.map((item, index, arr) => (\n              item === null ? (\n                <li className=\"page-item disabled\" key={arr[index - 1] + 1}>\n                  <span className=\"page-link\">\n                    {' ... '}\n                  </span>\n                </li>\n              ) : (\n                <li className=\"page-item\" key={item}>\n                  <button\n                    onClick={() => this.changePageHandler(item)}\n                    type=\"button\"\n                    name={item}\n                    className={classNames(\n                      'page-link',\n                      { 'page-link_active': item === selectedPage },\n                    )}\n                  >\n                    {item}\n                  </button>\n                </li>\n              )\n            ))}\n\n            <li\n              className={classNames(\n                'page-item', { disabled: !canRight },\n              )}\n            >\n              <button\n                className=\"page-link\"\n                type=\"button\"\n                onClick={() => this.changePageHandler(selectedPage + 1)}\n              >\n                Next\n              </button>\n            </li>\n          </ul>\n        </nav>\n\n        <select\n          name=\"maxCountPage\"\n          onChange={event => this.maxCountHandler(event)}\n          value={maxCountPage}\n        >\n          <option value={3}>3</option>\n          <option value={5}>5</option>\n          <option value={10}>10</option>\n          <option value={20}>20</option>\n        </select>\n\n      </>\n    );\n  }\n}\n\nPagination.propTypes = {\n  total: PropTypes.number.isRequired,\n  maxCount: PropTypes.number.isRequired,\n  onChangeMaxCount: PropTypes.func.isRequired,\n  selectedPage: PropTypes.number.isRequired,\n  onChangeSelected: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport Pagination from './components/Pagination/Pagination';\nimport items from './api/items';\n\nclass App extends React.Component {\n  state = {\n    selectedPage: 1,\n    itemsFromServer: items,\n    itemsForShow: items.slice(0, 5),\n    maxCount: 5,\n\n  };\n\n  setSelected = (pageNumber) => {\n    this.setState(({ itemsFromServer, maxCount }) => {\n      const end = pageNumber * maxCount;\n      const start = end - maxCount;\n\n      return {\n        itemsForShow: itemsFromServer.slice(start, end),\n        selectedPage: pageNumber,\n      };\n    });\n  };\n\n  setMaxCount = (value) => {\n    this.setState(({ itemsFromServer }) => ({\n      itemsForShow: itemsFromServer.slice(0, value),\n      maxCount: value,\n      selectedPage: 1,\n    }));\n  };\n\n  render() {\n    const {\n      selectedPage,\n      itemsForShow,\n      maxCount,\n      itemsFromServer,\n    } = this.state;\n\n    return (\n      <div>\n        <ul>\n          {itemsForShow.map(({ id, title }) => (\n            <li key={id}>{title}</li>\n          ))}\n        </ul>\n        <Pagination\n          total={itemsFromServer.length}\n          maxCount={maxCount}\n          onChangeMaxCount={this.setMaxCount}\n          selectedPage={selectedPage}\n          onChangeSelected={this.setSelected}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}